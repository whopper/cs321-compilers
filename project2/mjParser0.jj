PARSER_BEGIN(MjParser0)
import java.io.FileInputStream;

public class MjParser0 {
  public static void main(String args[]) {
    try {
      FileInputStream stream = new FileInputStream(args[0]);
      MjParser0 parser = new MjParser0(stream);
      parser.Program();
      stream.close();
    } catch (ParseException e) {
      System.err.println(e);
    } catch (Exception e) {
      System.err.println(e);
    }
  }
}
PARSER_END(MjParser0)

// TOKEN DEFINITIONS

SKIP:  { " " | "\t" | "\n" | "\r" | "\f" }

TOKEN: { <#DIGIT:  ["0"-"9"]> }
TOKEN: { <#INTLIT:  (<DIGIT>)+> }
TOKEN: { <RESERVED: "this"> }
TOKEN: { <ID: (["A"-"Z"]|["a"-"z"])+> }
TOKEN: { <LITERAL: (<INTLIT>)+ | "true" | "false"> }

// GRAMMAR RULES
/* Expr section */

// Expr0 -> Expr $    // augmented production
void Expr0(): {}
{
  Expr() <EOF>
}

void Expr(): {System.out.println("IN Expr()");}
{
  B()
}

void B(): {System.out.println("M +|-"); Token t;}
{
  C() (("+"|"-") C())*
}

void C(): {System.out.println("M *|/");}
{
  D() (("*"|"/") D())*
}

void D(): {System.out.println("M <|<=|>");}
{
  E() (("<"|"<="|">"|">=") E())*
}

void E(): {System.out.println("M ==|!=");}
{
  F() (("==" | "!=") F())*
}

void F(): {System.out.println("M &&");}
{
  G() (("&&") G())*
}

void G(): {System.out.println("M ||");}
{
  H() (("||") H())*
}

void H(): {}
{
  ("!")? I()
}

void I(): {}
{
  ("-")? J()
}

void J(): {System.out.println("In J()"); Token t;}
{
  "(" Expr() ")"
  | ExtId()[ "(" "["Args()"]" ")" | "[" Expr() "]"]
  // | Lvalue()
  | (t = <LITERAL> {System.out.println(t.image);})
}

void Args(): {System.out.println("IN Args()");}
{
  Expr() ("," Expr())?
}

void Lvalue(): {System.out.println("IN Lvalue()");}
{
  LOOKAHEAD(2) ExtId() "[" Expr() "]"
  | LOOKAHEAD(2) ExtId()
}

void ExtId(): {System.out.println("IN ExtId()");}
{
  "this." <ID>
  | <ID>
}
