//----------------------------------------------------------------------
// mjParser0.jj
//
// (For CS321 Fall 2014 - Will Hopper)
//----------------------------------------------------------------------
//
//

/*
  Notes on my changes to the grammar:
  * Ripped out Lvalue()
    - Was causing indirect left recursion in several places, and since it
      only had a few productions, I just directly implanted them wherever
      an Lvalue() call was needed.
  * Ripped out BinOp
    - Obviously, the operators needed to be put in order of their
      precedence to remove ambiguity. To accomplish this, I set up
      a sort of reverse filter system, where the grammar looks for
      the lowest precedence and works its way down to highest
      precedence. This guarantees that the lower precedence operators
      will appear at the top of our parse tree, which means that
      the higher precedence operators appear nearer the bottom,
      allowing them to be evaluated first as we expect.

      For example, void A(): {} {B() (("||") B())* }
      First we go directly into B(), which is the the next highest
      level of precedence. This continues all the way to the
      highest precendece level, at which point we evaluate the
      next terminal, which looks for the operator itself
      followed by the next *highest* operator. This continues
      "recursively" all the way back up.
    * Added some checks for integer overflows and unterminated strings / comments
    *
*/

//options { DEBUG_PARSER=true; }  /* Show debugging info */

PARSER_BEGIN(mjParser0)
import java.io.*;

public class mjParser0 {
  public static void main(String [] args) {
    try {
      if (args.length == 1) {
        FileInputStream stream = new FileInputStream(args[0]);
        new mjParser0(stream).Program();
        stream.close();
        System.out.println("Program's syntax is valid.");
      } else {
        System.out.println("Need a file name as command-line argument.");
      }
    } catch (TokenMgrError e) {
      System.err.println(e);
    } catch (Exception e) {
      System.err.println(e);
    }
  }
}
PARSER_END(mjParser0)

//
// LEXER SECTION ---------------------------------------------------------------
//

SKIP : /* White space */
{
  " " | "\t" | "\n" | "\r" | "\f"
}

SKIP : /* Comments -- multi-line form and error detection not included */
{
  <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| "/*" : MULTILINECOMMENT // Here we enter multiline comment state
}

// Allows us to catch unterminated comments
<MULTILINECOMMENT> MORE:
{
  <~[]>
}

// Rules for inside of multiline comment state
<MULTILINECOMMENT> SKIP :
{
  "*/" : DEFAULT // Back to the default state
}

TOKEN : /* Keywords */
{
  "class" | "extends" | "static" | "public" | "void" | "int" | "boolean"
| "new" | "this" | "if" | "else" | "while" | "return" | "main" | "String"
| "true" | "false" | "System" | "out" | "println" 
}

TOKEN : /* Internal tokens */
{
  <#DIGIT:  ["0"-"9"]>
| <#LETTER: (["A"-"Z"]|["a"-"z"])>
}

TOKEN : /* Integer literals */
{
  <INTLIT: (<DIGIT>)+>
    {
      /* Detect integer overflow */
      try {
        Integer.parseInt(matchedToken.image);
      } catch(NumberFormatException e) {
        throw new TokenMgrError("Lexical error: Integer overflow: line "
          + matchedToken.beginLine + ", column " + matchedToken.beginColumn
          + ", lexeme: " + matchedToken.image, 0); /* Detect integer overflow */
      }
    }
}

TOKEN : /* String literals  */
{
  <STRLIT: ("\"" (~["\"","\n"])* "\"")>
| <UNTERM_STRLIT: ("\"" (~["\"", "\n"])*)>
  { if (true) throw new TokenMgrError("Lexical error: Unterminated string: line "
        + matchedToken.beginLine + ", column " + matchedToken.beginColumn
        + ", lexeme: " + matchedToken.image, 0); } /* Detect unterm. strings */
}

TOKEN : /* Identifiers */
{
  <ID: <LETTER> (<LETTER>|<DIGIT>)*>
}

TOKEN : /* Operators and delimiters */
{
   "+" | "-" | "*" | "/" | "&&" | "||" | "!"
|  "==" | "!=" | "<" | "<=" | ">" | ">="
|  "=" | ";" | "," | "." | "(" | ")" | "[" | "]" | "{" | "}"
}

//
// PARSER SECTION ---------------------------------------------------------------
//

// Program -> {ClassDecl}
//
void Program(): {}
{
  (ClassDecl())* <EOF>
}

/* Original:
 * ClassDecl -> "class" <ID> ["extends" <ID>] "{" {VarDecl} {MethodDecl} "}"
*/
void ClassDecl(): {}
{
  "class" <ID> ["extends" <ID>] "{" (VarDecl())* (MethodDecl())* "}"
}


/* Original:
 * MethodDecl -> "public" ExtType <ID> "(" [Param {"," Param}] ")" 
 *                 "{" {VarDecl} {Stmt} "}"
 *            |  "public" "static" "void" "main" "(" "String" "[" "]" <ID> ")"
 *                 "{" {VarDecl} {Stmt} "}" 
*/
void MethodDecl(): {}
{
  "public" MethodDeclLeftFactor()
}

void MethodDeclLeftFactor(): {}
{
  ExtType() <ID> "(" [Param()] ("," Param())* ")" "{" StmtOrVarDecl() "}"
| "static" "void" "main" "(" "String" "[" "]" <ID> ")" "{" StmtOrVarDecl() "}"
}

void StmtOrVarDecl(): {}
{
  (LOOKAHEAD(2) VarDecl())* (Stmt())*
}

// Param -> Type <ID>
//
void Param(): {}
{
  Type() <ID>
}

// VarDecl -> Type <ID> ["=" InitExpr] ";"
//
void VarDecl(): {}
{
  Type() <ID> ["=" InitExpr()] ";"
}

// ExtType -> Type | "void"
//
void ExtType(): {}
{
  Type() | "void"
}

// Type -> BasicType
//      |  BasicType "[" "]"
//      |  <ID>
//
void Type(): {}
{
  BasicType() TypeLeftFactor()
| <ID>
}

void TypeLeftFactor(): {}
{
  ("[" "]")*
}

// BasicType -> "int" | "boolean"
//
void BasicType(): {}
{
  "int" | "boolean"
}

// Stmt -> "{" {Stmt} "}"
//      |  ExtId "(" [Args] ")" ";"
//      |  Lvalue "=" InitExpr ";"
//      |  "if" "(" Expr ")" Stmt ["else" Stmt]
//      |  "while" "(" Expr ")" Stmt
//      |  "System" "." "out" "." "println" "(" [PrintArg] ")" ";"
//      |  "return" [Expr] ";"
//
void Stmt(): {}
{
  /* I ripped out Lvalue() calls here as they were causing annoying
     indirect left recursion, which seems like more trouble than it's
     worth in this case. I just brought its productions here directly
  */
  "{" (Stmt())* "}"
| ExtId() (LOOKAHEAD(2) ("(" [Args()] ")" ";") | (["[" Expr() "]"] "=" InitExpr() ";"))
| "if" "(" Expr() ")" Stmt() ["else" Stmt()]
| "while" "(" Expr() ")" Stmt()
| "System" "." "out" "." "println" "(" [ PrintArg() ] ")" ";"
| "return" [Expr()] ";"
}

// Args -> Expr {"," Expr}
//
void Args(): {}
{
  Expr() ("," Expr())*
}

// PrintArg -> Expr | <STRLIT>
//
void PrintArg(): {}
{
  Expr() | <STRLIT>
}

// InitExpr -> "new" BasicType "[" <INTLIT> "]"
//          |  "new" <ID> "(" ")"
//          |  Expr
//
void InitExpr(): {}
{
  "new" InitExprLeftFactor()
| Expr()
}

void InitExprLeftFactor(): {}
{
  BasicType() "[" <INTLIT> "]"
| <ID> "(" ")"
}

/* Original:
 * Expr -> Expr BinOp Expr
 *      |  UnOp Expr
 *      |  "(" Expr ")"
 *      |  ExtId "(" [Args] ")"
 *      |  Lvalue
 *      |  Literal
*/
void Expr(): {}
{
  A()
}

/*  Operator precedence functions
 *  Needed to remove ambiguity from Expr()
 */

void A(): {} {B() (("||") B())* }
void B(): {} {C() (("&&") C())* }
void C(): {} {D() (("=="|"!=") D())* }
void D(): {} {E() (("<"|"<="|">"|">=") E())* }
void E(): {} {F() (("+"|"-") F())* }
void F(): {} {G() (("*"|"/") G())* }
void G(): {} {("-"|"!")* H() }

void H(): {}
{
  /* I ripped out Lvalue() calls here because they were causing
     indirect left recursion, and it was easier to bring its 
     productions here directly */
  ExtId() [("(" [Args()] ")" | "[" Expr() "]" )]
| "(" Expr() ")"
| Literal()
}

// ExtId -> ["this" "."] <ID> {"." <ID>}
//
void ExtId(): {}
{
  ["this" "."] <ID> ("." <ID>)*
}

// Literal -> <INTLIT> | "true" | "false"
//
void Literal(): {}
{
  <INTLIT> | "true" | "false"
}
