//----------------------------------------------------------------------
// mjParser0.jj
//
// (For CS321 Fall 2014 - Will Hopper)
//----------------------------------------------------------------------
//
//
options { DEBUG_PARSER=true; }  /* Show debugging info */

PARSER_BEGIN(mjParser)
import java.util.*;
import java.io.*;
import ast.*;

public class mjParser {
  public static void main(String [] args) {
    try {
      if (args.length == 1) {
        FileInputStream stream = new FileInputStream(args[0]);
        Ast.Program p = new mjParser(stream).Program();
        stream.close();
        System.out.print(p);
      } else {
        System.out.println("Need a file name as command-line argument.");
      }
    } catch (TokenMgrError e) {
      System.err.println(e);
    } catch (Exception e) {
      System.err.println(e);
    }
  }
}
PARSER_END(mjParser)

//
// LEXER SECTION ---------------------------------------------------------------
//

SKIP : /* White space */
{
  " " | "\t" | "\n" | "\r" | "\f"
}

SKIP : /* Comments -- multi-line form and error detection not included */
{
  <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| "/*" : MULTILINECOMMENT // Here we enter multiline comment state
}

// Allows us to catch unterminated comments
<MULTILINECOMMENT> MORE:
{
  <~[]>
}

// Rules for inside of multiline comment state
<MULTILINECOMMENT> SKIP :
{
  "*/" : DEFAULT // Back to the default state
}

TOKEN : /* Keywords */
{
  "class" | "extends" | "static" | "public" | "void" | "int" | "boolean"
| "new" | "this" | "if" | "else" | "while" | "return" | "main" | "String"
| "true" | "false" | "System" | "out" | "println" 
}

TOKEN : /* Internal tokens */
{
  <#DIGIT:  ["0"-"9"]>
| <#LETTER: (["A"-"Z"]|["a"-"z"])>
}

TOKEN : /* Integer literals */
{
  <INTLIT: (<DIGIT>)+>
    {
      /* Detect integer overflow */
      try {
        Integer.parseInt(matchedToken.image);
      } catch(NumberFormatException e) {
        throw new TokenMgrError("Lexical error: Integer overflow: line "
          + matchedToken.beginLine + ", column " + matchedToken.beginColumn
          + ", lexeme: " + matchedToken.image, 0); /* Detect integer overflow */
      }
    }
}

TOKEN : /* String literals  */
{
  <STRLIT: ("\"" (~["\"","\n"])* "\"")>
| <UNTERM_STRLIT: ("\"" (~["\"", "\n"])*)>
  { if (true) throw new TokenMgrError("Lexical error: Unterminated string: line "
        + matchedToken.beginLine + ", column " + matchedToken.beginColumn
        + ", lexeme: " + matchedToken.image, 0); } /* Detect unterm. strings */
}

TOKEN : /* Identifiers */
{
  <ID: <LETTER> (<LETTER>|<DIGIT>)*>
}

TOKEN : /* Operators and delimiters */
{
   "+" | "-" | "*" | "/" | "&&" | "||" | "!"
|  "==" | "!=" | "<" | "<=" | ">" | ">="
|  "=" | ";" | "," | "." | "(" | ")" | "[" | "]" | "{" | "}"
}

//
// PARSER SECTION ---------------------------------------------------------------
//

// Program -> {ClassDecl}
//
Ast.Program Program():
{ List<Ast.ClassDecl> cl = new ArrayList<Ast.ClassDecl>();
  Ast.ClassDecl c; }
{
  ( c=ClassDecl() {cl.add(c);} )* <EOF>
  { return new Ast.Program(cl); }
}

/*
 * ClassDecl -> "class" <ID> ["extends" <ID>] "{" {VarDecl} {MethodDecl} "}"
 * (String classname, String parentclass, list of VarDecls, list of MethodDecls)
*/
Ast.ClassDecl ClassDecl():
{ Token tkn;
  String cn;
  String pc="";
  List<Ast.VarDecl> vdl = new ArrayList<Ast.VarDecl>();
  List<Ast.MethodDecl> mdl = new ArrayList<Ast.MethodDecl>();
  Ast.VarDecl v;
  Ast.MethodDecl m; }
{
  "class" tkn=<ID> { cn=new String(tkn.image); } ["extends" tkn=<ID> {pc=new String(tkn.image);}] "{"
          ( v=VarDecl() {vdl.add(v);} )*
          ( m=MethodDecl() {mdl.add(m);} )* "}"

  { return new Ast.ClassDecl(cn, pc, vdl, mdl); }

}

/* Original:
 * MethodDecl -> "public" ExtType <ID> "(" [Param {"," Param}] ")"
 *                 "{" {VarDecl} {Stmt} "}"
 *            |  "public" "static" "void" "main" "(" "String" "[" "]" <ID> ")"
 *                 "{" {VarDecl} {Stmt} "}"
 * (Type returntype, String name, list of params, list of VarDecls, list of Stmts)
*/
Ast.MethodDecl MethodDecl():
{
  Token tkn;
  Ast.Type t=null;
  Ast.Param p;
  Ast.VarDecl v;
  Ast.Stmt s;
  List<Ast.Param> plist = new ArrayList<Ast.Param>();
  List<Ast.VarDecl> vlist = new ArrayList<Ast.VarDecl>();
  List<Ast.Stmt> slist = new ArrayList<Ast.Stmt>();
}
{
"public" ( t=ExtType() tkn=<ID> "(" [p=Param() {plist.add(p);} ("," p=Param() {plist.add(p);})*] ")"
         | "static" "void" tkn="main" "(" "String" "[" "]" <ID> ")" )
         "{" (LOOKAHEAD(2)v=VarDecl() {vlist.add(v);})* (s=Stmt() {slist.add(s);})* "}"

          { return new Ast.MethodDecl(t, tkn.image, plist, vlist, slist); }

}

// Param -> Type <ID>
// (Type type, String name)
Ast.Param Param():
{
  Token tkn;
  Ast.Type t;
}
{
  t=Type() tkn=<ID>
  { return new Ast.Param(t, tkn.image); }
}

// VarDecl -> Type <ID> ["=" InitExpr] ";"
// (Type type, String name, Exp initExpr (possibly null))
Ast.VarDecl VarDecl():
{
  Token tkn;
  Ast.Type t;
  Ast.Exp initExp=null;
}
{
  t=Type() tkn=<ID> ["=" initExp=InitExpr()] ";"
  { return new Ast.VarDecl(t, tkn.image, initExp); }
}

// ExtType -> Type | "void"
//
Ast.Type ExtType(): {Ast.Type t;}
{
  t=Type() { return t; }
| "void"   { return null; }
}

// Type -> BasicType
//      |  BasicType "[" "]"
//      |  <ID>
//
Ast.Type Type(): {Ast.Type t; Token tkn; boolean isArray=false;}
{
    t=BasicType() ["[" "]" {isArray = true;}]
      { if(isArray == true) {
          return new Ast.ArrayType(t);
        } else {
          return t;
        }
      }

  | tkn=<ID>  { return new Ast.ObjType(tkn.image); }
}

// BasicType -> "int" | "boolean"
//
Ast.Type BasicType(): {}
{
  "int"     { return new Ast.IntType();  }
| "boolean" { return new Ast.BoolType(); }
}

// Stmt -> "{" {Stmt} "}"
//      |  ExtId "(" [Args] ")" ";"
//      |  Lvalue "=" InitExpr ";"
//      |  "if" "(" Expr ")" Stmt ["else" Stmt]
//      |  "while" "(" Expr ")" Stmt
//      |  "System" "." "out" "." "println" "(" [PrintArg] ")" ";"
//      |  "return" [Expr] ";"
//
Ast.Stmt Stmt():
{
  Ast.Type t;
  List<Ast.Param> plist = new ArrayList<Ast.Param>();
  Ast.Param p;
  List<Ast.VarDecl> vlist = new ArrayList<Ast.VarDecl>();
  Ast.VarDecl v;
  List<Ast.Stmt> slist = new ArrayList<Ast.Stmt>();
  Ast.Stmt s1;
  Ast.Stmt s2=null;
  Ast.Stmt finalStmt;

  Ast.Exp eLeft;
  Ast.Exp e1=null;
  Ast.Exp e2=null;
  Ast.Exp e3=null;
  List<Ast.Exp> elist = new ArrayList<Ast.Exp>();
  Ast.PrArg pr=null;
  String str = null;
}
{
  "{" (s1=Stmt() {slist.add(s1);})* "}" { return new Ast.Block(slist); }
| eLeft=ExtId() ( ("(" [elist=Args()] ")" ";"
      {
        if(eLeft instanceof Ast.Id) {
          e2 = new Ast.This();
          str = ((Ast.Id)e2).nm;
        } else if (eLeft instanceof Ast.Field) {
          e2 = ((Ast.Field)eLeft).obj;
          str = ((Ast.Field)eLeft).nm;
        }

        finalStmt = new Ast.CallStmt(e2, str, elist);} )

| (["[" e1=Expr() "]"]
    { if (e1 != null) {
        e2 = new Ast.ArrayElm(eLeft, e1);
      } else {
        e2 = eLeft;
      }
    }
  "=" e3=InitExpr() ";")) { finalStmt = new Ast.Assign(e1, e2);}
  { return finalStmt; }

| "if" "(" e1=Expr() ")" s1=Stmt() ["else" s2=Stmt()] { return new Ast.If(e1, s1, s2);}
| "while" "(" e1=Expr() ")" s1=Stmt()                 { return new Ast.While(e1, s1); }
| "System" "." "out" "." "println" "(" [ pr=PrintArg() ] ")" ";" { return new Ast.Print(pr); }
| "return" [e1=Expr()] ";"                            { return new Ast.Return(e1); }
}

// Args -> Expr {"," Expr}
//
List<Ast.Exp> Args():
{
  Ast.Exp e1;
  Ast.Exp e2;
  List<Ast.Exp> elist = new ArrayList<Ast.Exp>();
}
{
  e1=Expr() ("," e2=Expr() {elist.add(e2);})* { return elist; }
}

// PrintArg -> Expr | <STRLIT>
//
Ast.PrArg PrintArg():
{
  Token tkn;
  Ast.Exp e;
}
{
 e=Expr()       { return e; }
 | tkn=<STRLIT> { return new Ast.StrLit(tkn.image.replace("\"", "")); }
}

// InitExpr -> "new" BasicType "[" <INTLIT> "]"
//          |  "new" <ID> "(" ")"
//          |  Expr
//
 Ast.Exp InitExpr():
{ Token tkn;
  Ast.Type t=null;
  Ast.Exp e;
}
{
  "new" ( t=BasicType() "[" tkn=<INTLIT> "]" | tkn=<ID> "(" ")" )
    { if(t != null) { // This is an array declaration
        return new Ast.NewArray(t, Integer.parseInt(tkn.image));
      } else {        // This is an object declaration
        return new Ast.NewObj(tkn.image);
      }
    }
| e=Expr() { return e; }
}

Ast.Exp Expr(): {Ast.Exp e1, e2=null; Token tkn=null;}
{
  e1=AndExpr() ("||" e2=AndExpr())*
  {
    if(tkn != null) {
      return new Ast.Binop(Ast.BOP.OR, e1, e2);
    } else {
      return e1;
    }
  }
}

Ast.Exp AndExpr(): {Ast.Exp e1, e2=null; Token tkn=null;}
{
  e1=RelExpr() ("&&" e2=RelExpr())*
  {
    if(tkn != null) {
      return new Ast.Binop(Ast.BOP.AND, e1, e2);
    } else {
      return e1;
    }
  }
}

Ast.Exp RelExpr(): {Ast.Exp e1, e2=null; Token tkn=null;}
{
  e1=ArithExpr() ((tkn="=="|tkn="!="|tkn="<"|tkn="<="|tkn=">"|tkn=">=") e2=ArithExpr())*
  {
    if(tkn != null) {
      if(tkn.image == "==") {
        return new Ast.Binop(Ast.BOP.EQ, e1, e2);
      } else if(tkn.image == "!=") {
        return new Ast.Binop(Ast.BOP.NE, e1, e2);
      } else if(tkn.image == "<") {
        return new Ast.Binop(Ast.BOP.LT, e1, e2);
      } else if(tkn.image == "<=") {
        return new Ast.Binop(Ast.BOP.LE, e1, e2);
      } else if(tkn.image == ">") {
        return new Ast.Binop(Ast.BOP.GT, e1, e2);
      } else if(tkn.image == ">=") {
        return new Ast.Binop(Ast.BOP.GE, e1, e2);
      }
    } else {
      return e1;
    }
  }
}

Ast.Exp ArithExpr(): {Ast.Exp e1, e2=null; Token tkn=null;}
{
  e1=Term() ((tkn="+"|tkn="-") Term())*
  {
    if(tkn != null) {
      if(tkn.image == "+") {
        return new Ast.Binop(Ast.BOP.ADD, e1, e2);
      } else if(tkn.image == "-") {
        return new Ast.Binop(Ast.BOP.SUB, e1, e2);
      }
    } else {
      return e1;
    }
  }
}

Ast.Exp Term(): {Ast.Exp e1, e2=null; Token tkn=null;}
{
  e1=Factor() ((tkn="*"|tkn="/") e2=Factor())*
  {
    if(tkn != null) {
      if(tkn.image == "*") {
        return new Ast.Binop(Ast.BOP.MUL, e1, e2);
      } else if(tkn.image == "/") {
        return new Ast.Binop(Ast.BOP.DIV, e1, e2);
      }
    } else {
      return e1;
    }
  }
}

Ast.Exp Factor():
{
  Token tkn;
  Ast.Exp e1=null, e2=null, e3=null, eExpr=null;
  Ast.UOP u;
  List<Ast.Exp> elist = new ArrayList<Ast.Exp>();
  boolean b;
  int i;
  String str = null;
}
{
u=UnOp() e2=Factor()            { return new Ast.Unop(u, e2); }
| "(" e1=Expr() ")"             { return e1; }
| i=IntLit()                    { return new Ast.IntLit(i);  }
| b=BoolLit()                   { return new Ast.BoolLit(b); }
| LOOKAHEAD(2) tkn=<ID>         { return new Ast.Id(tkn.image); }
| LOOKAHEAD(2) e1=ExtId() [("(" [elist=Args()] ")" | "[" e2=Expr() "]" )]
      {
        if(e1 instanceof Ast.Id) {
          e3 = new Ast.This();
          str = ((Ast.Id)e3).nm;
        } else if (e1 instanceof Ast.Field) {
          e3 = ((Ast.Field)e1).obj;
          str = ((Ast.Field)e1).nm;
        }
        return new Ast.Call(e2, str, elist);
      }

| LOOKAHEAD(2) e1=ExtId() [("(" [elist=Args()] ")" | "[" e2=Expr() "]" )]
      {
        if(e1 instanceof Ast.Id) {
          e3 = new Ast.This();
          str = ((Ast.Id)e3).nm;
        } else if (e1 instanceof Ast.Field) {
          e3 = ((Ast.Field)e1).obj;
          str = ((Ast.Field)e3).nm;
        }
        return new Ast.Call(e3, str, elist);
      }
}

Ast.UOP UnOp(): {Token tkn;}
{
  tkn="-"
|tkn="!"
  {
    if(tkn != null) {
      if(tkn.image == "-") {
        return Ast.UOP.NEG;
      } else if(tkn.image == "!") {
        return Ast.UOP.NOT;
      }
    }
  }
}

// ExtId -> ["this" "."] <ID> {"." <ID>}
//
Ast.Exp ExtId():
{
  Token tkn;
  Ast.Exp e1 = null;
  Ast.Exp e2 = null;
}
{
  ["this" {e1=new Ast.This();} "."] tkn=<ID>
        {
          if (e1 == null) {
            e2 = new Ast.Id(tkn.image);
          } else {
            e2 = new Ast.Field(e1, tkn.image);
          }
        }

  ("." tkn=<ID> { e1 = new Ast.Field(e2, tkn.image); })*
  {return e1;}
}

int IntLit(): {Token tkn;}
{
  tkn=<INTLIT> { return Integer.parseInt(tkn.image); }
}

boolean BoolLit(): {Token tkn;}
{
  tkn="true"   { return true; }
| tkn="false"  { return false; }
}
